"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[95],{7319:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>c,frontMatter:()=>a,metadata:()=>h,toc:()=>d});var i=s(4848),r=s(8453);const a={sidebar_position:1,title:"Code Review PR Workflow"},t=void 0,h={id:"contributing/code-review-pr-workflow",title:"Code Review PR Workflow",description:"Code review through Pull Requests (PRs) is an important aspect of development because it is one of the primary",source:"@site/docs/contributing/code-review-pr-workflow.md",sourceDirName:"contributing",slug:"/contributing/code-review-pr-workflow",permalink:"/docs/contributing/code-review-pr-workflow",draft:!1,unlisted:!1,editUrl:"https://github.com/paion-data/Kugelblitz/tree/master/docs/docs/contributing/code-review-pr-workflow.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Code Review PR Workflow"},sidebar:"tutorialSidebar",previous:{title:"Development",permalink:"/docs/development"},next:{title:"Markdown Documentation Style Guide",permalink:"/docs/contributing/markdown-documentation-style-guide"}},l={},d=[{value:"What Makes a Good PR?",id:"what-makes-a-good-pr",level:2},{value:"Types of Changes",id:"types-of-changes",level:3},{value:"Organizing Changes",id:"organizing-changes",level:3},{value:"Documenting Changes",id:"documenting-changes",level:3},{value:"Phases",id:"phases",level:2},{value:"Work in Progress (WIP)",id:"work-in-progress-wip",level:3},{value:"Reviewable",id:"reviewable",level:3},{value:"Mergeable",id:"mergeable",level:3},{value:"Merged*",id:"merged",level:3},{value:"Closed*",id:"closed",level:3},{value:"Flow",id:"flow",level:2},{value:"Flags",id:"flags",level:2},{value:"Breakfix",id:"breakfix",level:3},{value:"Breaking Change",id:"breaking-change",level:3},{value:"Need 2 Reviews",id:"need-2-reviews",level:3},{value:"Need 1 Review",id:"need-1-review",level:3},{value:"Need Changes",id:"need-changes",level:3},{value:"Need Rebase",id:"need-rebase",level:3},{value:"Need Squash",id:"need-squash",level:3}];function o(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Code review through Pull Requests (PRs) is an important aspect of development because it is one of the primary\ncommunication channels of changes in the codebase to everyone else working on it. Determining the state of a PR,\nhowever, is not always easy, especially for very active PRs with lots of comments and discussion. This document\ndescribes how we use GitHub's labels to mark the state of a PR, making it easy to determine it's state at a glance. It\nalso describes what goes into making a PR easy to review. (and the easier a PR is to review, the faster it will get\nmerged!)"}),"\n",(0,i.jsx)(n.h2,{id:"what-makes-a-good-pr",children:"What Makes a Good PR?"}),"\n",(0,i.jsx)(n.p,{children:"The purpose of code review and opening a PR is two-fold:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"To change Kugelblitz, which is the job of the author of the changes"}),"\n",(0,i.jsx)(n.li,{children:"To ensure that the changes in the PR make Kugelblitz better, which is the job of the PR reviewers"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"types-of-changes",children:"Types of Changes"}),"\n",(0,i.jsx)(n.p,{children:"The types of changes made to Kugelblitz are usually of a few main types:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cleanup"}),": these fall into 3 categories:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Stylistic changes that make the code easier to read and better aligned with the rest of the codebase."}),"\n",(0,i.jsx)(n.li,{children:"Refactoring changes that make the code better by reducing duplication or cleaning up classes and abstractions that\nmay have had too many responsibilities."}),"\n",(0,i.jsx)(n.li,{children:"Changes to add or improve tests to cover untested behavior or make tests clearer."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Logical"}),": These are changes that add features, functionality, and capabilities that Kugelblitz didn't have before,\nor perhaps change the way existing features, functionality, and capabilities work."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"organizing-changes",children:"Organizing Changes"}),"\n",(0,i.jsx)(n.p,{children:"While the bulk of submitted changes are Logical changes, Cleanup changes are very welcome. When making Cleanup changes,\nhowever, following a few small guidelines will ensure that the changes are easy for PR reviewers to review:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The changes ",(0,i.jsx)(n.em,{children:"should"})," make the code better according to the ",(0,i.jsx)(n.a,{href:"https://google.github.io/styleguide/javaguide.html",children:"good style guidelines"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The changes ",(0,i.jsx)(n.em,{children:"should not"})," obscure other changes, especially Logical changes."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It's better to have Cleanup changes as a separate PR, or at least as separate commits from commits with Logical\nchanges. (Separate PR strongly preferred)"}),"\n",(0,i.jsx)(n.li,{children:"It's better to have too many small commits that need to be squashed together instead of too few large commits that\nhave overlapping changes. Small commits can be combined more easily than large commits can be split."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"documenting-changes",children:"Documenting Changes"}),"\n",(0,i.jsxs)(n.p,{children:["In some cases, what the changes are and why they are being made are self-evident, but in many cases, it's not clear what\nthe spirit of the change is. So, to make it easier for reviewers to understand what the changes are, and why they are\nbeing made, please describe the changes in the PR description. It's also good to review your own PRs and leave comments\nwhere the changes need additional explanation. Remember, ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"it's the author's job to make reviewing changes easy for the\nreviewers!"})})]}),"\n",(0,i.jsx)(n.h2,{id:"phases",children:"Phases"}),"\n",(0,i.jsx)(n.p,{children:"As a PR moves from being opened to being Merged or Closed, there are a number of different states or phases that it will\nmove through, ending up being either Closed or Merged."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#work-in-progress-wip",children:"Work in Progress (WIP)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#reviewable",children:"Reviewable"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#mergeable",children:"Mergeable"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#merged",children:"Merged*"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#closed",children:"Closed*"})}),"\n"]}),"\n",(0,i.jsx)("sub",{children:"* denotes built-in GitHub PR states. "}),"\n",(0,i.jsx)(n.h3,{id:"work-in-progress-wip",children:"Work in Progress (WIP)"}),"\n",(0,i.jsx)(n.p,{children:"Changes are actively being made to the PR, often in response to feedback from reviewers, or to allow feedback on\npartial work. Feel free to review it, but the code is not considered complete by the author and will likely require\nre-review once the work in progress is completed."}),"\n",(0,i.jsx)(n.h3,{id:"reviewable",children:"Reviewable"}),"\n",(0,i.jsx)(n.p,{children:"The author considers the changes complete and ready for full review."}),"\n",(0,i.jsx)(n.h3,{id:"mergeable",children:"Mergeable"}),"\n",(0,i.jsxs)(n.p,{children:["Once a PR has met this set of checks, it is Mergeable and is ready to be ",(0,i.jsx)(n.a,{href:"#merged",children:"Merged*"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The changes have been approved by at least 2 reviewers"}),"\n",(0,i.jsxs)(n.li,{children:["The changes are based on the head of the ",(0,i.jsx)(n.code,{children:"master"})," branch"]}),"\n",(0,i.jsx)(n.li,{children:"The commits have been squashed into logical commits"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"merged",children:"Merged*"}),"\n",(0,i.jsxs)(n.p,{children:["The PR has been merged. This is a built-in GitHub PR state and ",(0,i.jsx)(n.em,{children:"should"})," coexist with the ",(0,i.jsx)(n.a,{href:"#mergeable",children:"Mergeable"})," state."]}),"\n",(0,i.jsx)(n.h3,{id:"closed",children:"Closed*"}),"\n",(0,i.jsx)(n.p,{children:"The changes will not be merged and the PR should not receive additional attention. Closed PRs can be reopened."}),"\n",(0,i.jsx)(n.h2,{id:"flow",children:"Flow"}),"\n",(0,i.jsx)(n.p,{children:"While there are no restrictions on the states, since they are only indicated by labels, this table details the expected\nstate transitions from one phase to another."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Start"}),(0,i.jsx)(n.th,{children:"End"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"-"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"#work-in-progress-wip",children:"Work in Progress"}),", ",(0,i.jsx)(n.a,{href:"#reviewable",children:"Reviewable"}),", ",(0,i.jsx)(n.a,{href:"#closed",children:"Closed*"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"#work-in-progress-wip",children:"Work in Progress"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"#reviewable",children:"Reviewable"}),", ",(0,i.jsx)(n.a,{href:"#closed",children:"Closed*"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"#reviewable",children:"Reviewable"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"#work-in-progress-wip",children:"Work in Progress"}),", ",(0,i.jsx)(n.a,{href:"#mergeable",children:"Mergeable"}),", ",(0,i.jsx)(n.a,{href:"#closed",children:"Closed*"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"#mergeable",children:"Mergeable"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"#merged",children:"Merged*"}),", ",(0,i.jsx)(n.a,{href:"#closed",children:"Closed*"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"#merged",children:"Merged*"})}),(0,i.jsx)(n.td,{children:"-"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"#closed",children:"Closed*"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"#work-in-progress-wip",children:"Work in Progress"}),", ",(0,i.jsx)(n.a,{href:"#reviewable",children:"Reviewable"})]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"flags",children:"Flags"}),"\n",(0,i.jsxs)(n.p,{children:["Depending on the changes, what's been happening in the repo outside the PR, and where in the process a PR is, different\nflags may be applied to the PR. Some flags indicate aspects of the changes, while other flags indicate things that need\nto happen to the commits or changes in the PR before it can be considered ",(0,i.jsx)(n.a,{href:"#mergeable",children:"Mergeable"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#breakfix",children:"Breakfix"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#breaking-change",children:"Breaking Change"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#need-2-reviews",children:"Need 2 Reviews"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#need-1-review",children:"Need 1 Review"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#need-changes",children:"Need Changes"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#need-rebase",children:"Need Rebase"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#need-squash",children:"Need Squash"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"breakfix",children:"Breakfix"}),"\n",(0,i.jsxs)(n.p,{children:["The changes in the PR are urgently needed to fix a broken release. Broken releases should be fixed as quickly as\npossible, so ",(0,i.jsx)(n.code,{children:"Breakfix"})," PRs should be given higher priority than other PRs."]}),"\n",(0,i.jsx)(n.h3,{id:"breaking-change",children:"Breaking Change"}),"\n",(0,i.jsx)(n.p,{children:"The changes in the PR are backwards-incompatible with customer-facing APIs. These APIs are not currently documented,\nbut once they are, they will be linked here. In the mean time, the working list of customer-facing APIs include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Response Formats (including headers)"}),"\n",(0,i.jsx)(n.li,{children:"Request Formats (including URLs, query string parameters, and headers)"}),"\n",(0,i.jsx)(n.li,{children:"Configuration (including property names, helper classes, and interfaces)"}),"\n",(0,i.jsx)(n.li,{children:"Database (e.g. ArangoDB) Queries"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"need-2-reviews",children:"Need 2 Reviews"}),"\n",(0,i.jsxs)(n.p,{children:["2 more approvals are needed before the PR can be considered ",(0,i.jsx)(n.a,{href:"#mergeable",children:"Mergeable"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"need-1-review",children:"Need 1 Review"}),"\n",(0,i.jsxs)(n.p,{children:["1 more approval is needed before the PR can be considered ",(0,i.jsx)(n.a,{href:"#mergeable",children:"Mergeable"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"need-changes",children:"Need Changes"}),"\n",(0,i.jsx)(n.p,{children:"The reviewers of the PR feel that there are still changes that need to be made before they can approve the PR. Any\nreviewer who requests changes in a comment should make sure that this tag is applied to the PR, and the author of the\nPR should remove this tag when they believe they have made all of the needed changes."}),"\n",(0,i.jsx)(n.h3,{id:"need-rebase",children:"Need Rebase"}),"\n",(0,i.jsxs)(n.p,{children:["The changes need to be rebased onto the head of the ",(0,i.jsx)(n.code,{children:"master"})," branch before the PR can be considered\n",(0,i.jsx)(n.a,{href:"#mergeable",children:"Mergeable"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"need-squash",children:"Need Squash"}),"\n",(0,i.jsxs)(n.p,{children:["The changes need to be squashed into logical commits before the PR can be considered ",(0,i.jsx)(n.a,{href:"#mergeable",children:"Mergeable"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note: A PR that has not gotten the 2 approvals it needs should not be squashed."})," Any commits made in response to\nreview comments should be left on the branch until the review is complete so that it is easy for reviewers to track\nchanges made in response to their comments."]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>h});var i=s(6540);const r={},a=i.createContext(r);function t(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);